services:
  postgres:
    image: postgres:13
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      HTTP_PROXY: "http://proxy.example.com:8080"
      HTTPS_PROXY: "http://proxy.example.com:8080"
      NO_PROXY: "localhost,127.0.0.1,host.docker.internal"

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - postgres
    env_file: .env
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: ${AIRFLOW__CORE__SQL_ALCHEMY_CONN}
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./scripts:/opt/airflow/scripts
      - ./config:/opt/airflow/config
      - ./mlruns:/opt/airflow/mlruns
      - ./mlflow_db/mlflow.db:/opt/airflow/mlflow.db   # SQLite DB file
    command: bash -c "airflow db upgrade"

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - airflow-init
    env_file: .env
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: ${AIRFLOW__CORE__SQL_ALCHEMY_CONN}
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__WEBSERVER__RBAC: "True"
      AIRFLOW__WEBSERVER__AUTH_BACKEND: airflow.auth.backends.password_auth
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./scripts:/opt/airflow/scripts
      - ./entrypoint.sh:/entrypoint.sh
      - ./config:/opt/airflow/config
      - ./mlruns:/opt/airflow/mlruns
      - ./mlflow_db/mlflow.db:/opt/airflow/mlflow.db   # SQLite DB file
    ports:
      - "8080:8080"
    command: bash /entrypoint.sh

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - airflow-init
    env_file: .env
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: ${AIRFLOW__CORE__SQL_ALCHEMY_CONN}
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./scripts:/opt/airflow/scripts
      - ./config:/opt/airflow/config
      - ./mlruns:/opt/airflow/mlruns
      - ./mlflow_db/mlflow.db:/opt/airflow/mlflow.db   # SQLite DB file
    command: bash -c "airflow scheduler"

  mlflow:
    build:
      context: ./mlflow
      dockerfile: Dockerfile
    container_name: mlflow
    restart: always
    ports:
      - "5000:5000"
    environment:
      MLFLOW_TRACKING_URI: http://localhost:5000
    volumes:
      - ./mlruns:/mlruns
      - ./mlflow:/mlflow
    command: >
      mlflow server
      --backend-store-uri sqlite:////mlflow/mlflow.db
      --default-artifact-root /mlruns
      --host 0.0.0.0
      --port 5000

volumes:
  postgres_data:
  mlruns:
