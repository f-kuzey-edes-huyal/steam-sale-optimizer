services:
  postgres:
    image: postgres:13
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - back-tier
    environment:
      HTTP_PROXY: "http://proxy.example.com:8080"
      HTTPS_PROXY: "http://proxy.example.com:8080"
      NO_PROXY: "localhost,127.0.0.1,host.docker.internal"
    restart: always

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - postgres
    env_file: .env
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./scripts:/opt/airflow/scripts
      - ./config:/opt/airflow/config
      - ./mlruns:/mlruns
      - ./mlflow_db:/mlflow_db
      - ./models:/opt/airflow/models
      - ./utils:/opt/airflow/utils
    command: bash -c "airflow db upgrade"
    networks:
      - back-tier
    restart: on-failure

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - airflow-init
    env_file: .env
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__WEBSERVER__RBAC: "True"
      AIRFLOW__WEBSERVER__AUTH_BACKEND: airflow.auth.backends.password_auth
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./scripts:/opt/airflow/scripts
      - ./entrypoint.sh:/entrypoint.sh
      - ./config:/opt/airflow/config
      - ./mlruns:/mlruns
      - ./mlflow_db:/mlflow_db
      - ./models:/opt/airflow/models
      - ./utils:/opt/airflow/utils
    ports:
      - "8080:8080"
    command: bash /entrypoint.sh
    networks:
      - back-tier
      - front-tier
    restart: always

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - airflow-init
    env_file: .env
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
      - ./scripts:/opt/airflow/scripts
      - ./config:/opt/airflow/config
      - ./mlruns:/mlruns
      - ./mlflow_db:/mlflow_db
      - ./models:/opt/airflow/models
      - ./utils:/opt/airflow/utils
    command: airflow scheduler
    networks:
      - back-tier
    restart: always

  mlflow:
    build:
      context: ./mlflow
      dockerfile: Dockerfile
    container_name: mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/mlruns
      - ./mlflow:/mlflow
      - ./mlflow_db:/mlflow_db
    command: >
      mlflow server
      --backend-store-uri sqlite:////mlflow_db/mlflow.db
      --default-artifact-root /mlruns
      --host 0.0.0.0
      --port 5000
    networks:
      - back-tier
      - front-tier
    restart: always

  adminer:
    image: adminer
    ports:
      - "8081:8080"
    networks:
      - front-tier
      - back-tier
    restart: always

  grafana:
    image: grafana/grafana
    user: "472"
    ports:
      - "3000:3000"
    volumes:
      - ./config/datasources:/etc/grafana/provisioning/datasources:ro
      - ./config/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./dashboards:/opt/grafana/dashboards
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    depends_on:
      - postgres
    networks:
      - front-tier
      - back-tier
    restart: always

  fastapi-app:
    build:
      context: .
      dockerfile: Dockerfile.deployment
    ports:
      - "8082:80"
    networks:
      - back-tier
      - front-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

volumes:
  postgres_data:
  mlruns:
  mlflow_db:
  grafana_data:

networks:
  front-tier:
  back-tier:
