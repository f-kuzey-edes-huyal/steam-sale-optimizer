import requests
from bs4 import BeautifulSoup
import pandas as pd
from datetime import datetime, timedelta
import time
import os

def get_recent_games(pages=3):
    url = "https://store.steampowered.com/search/"
    games = []
    cutoff_date = datetime.now() - timedelta(days=3 * 365)

    for page in range(1, pages + 1):
        params = {
            "sort_by": "Released_DESC",
            "page": page,
            "filter": "released",
            "os": "win"
        }
        response = requests.get(url, params=params)
        soup = BeautifulSoup(response.text, "html.parser")
        rows = soup.select(".search_result_row")

        for row in rows:
            title = row.select_one(".title").text.strip()
            link = row["href"]
            appid = next((part for part in link.rstrip("/").split("/") if part.isdigit()), None)

            if not appid:
                continue

            release_text = row.select_one(".search_released").text.strip()
            try:
                release_date = datetime.strptime(release_text, "%b %d, %Y")
            except:
                continue

            if release_date < cutoff_date:
                continue

            games.append({
                "game_id": appid,
                "title": title,
                "release_date": release_date.strftime("%Y-%m-%d"),
                "developer": None,
                "publisher": None,
                "base_price": None
            })

        time.sleep(1)

    return pd.DataFrame(games)


def get_game_details(appid):
    url = f"https://store.steampowered.com/app/{appid}/"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, "html.parser")

    developer = "Unknown"
    publisher = "Unknown"
    base_price = 0.0

    try:
        # Developer
        dev_row = soup.find('div', class_='dev_row')
        if dev_row:
            dev_links = dev_row.find_all('a')
            developer = ", ".join(a.text.strip() for a in dev_links)

        # Publisher
        details_block = soup.select_one('div.details_block')
        if details_block:
            text_lines = details_block.get_text(separator="\n").split("\n")
            pub_lines = [line for line in text_lines if "Publisher:" in line]
            if pub_lines:
                for line in text_lines:
                    if line.startswith("Publisher:"):
                        publisher = line.replace("Publisher:", "").strip()
                        break

        # Price
        price_element = soup.select_one('.discount_final_price, .game_purchase_price')
        if price_element:
            price_text = price_element.text.strip()
            if "Free" in price_text:
                base_price = 0.0
            else:
                cleaned = price_text.replace("$", "").replace("€", "").replace("£", "").replace(",", "")
                try:
                    base_price = float(cleaned)
                except:
                    pass

    except Exception as e:
        print(f"Error on {appid}: {e}")

    return developer, publisher, base_price


